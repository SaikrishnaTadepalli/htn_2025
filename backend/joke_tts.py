#!/usr/bin/env python3
"""
Text-to-Speech module for joke responses using ElevenLabs.
This module takes jokes generated by joke_responder.py and converts them to speech.
"""

import asyncio
import logging
import os
from typing import Optional, Dict, Any
from elevenlabs import ElevenLabs
from elevenlabs import play
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

logger = logging.getLogger(__name__)

class JokeTTS:
    """
    Text-to-Speech class for converting jokes to audio using ElevenLabs.
    """
    
    def __init__(self, elevenlabs_api_key: Optional[str] = None):
        """
        Initialize the JokeTTS with ElevenLabs API key.
        
        Args:
            elevenlabs_api_key: ElevenLabs API key. If None, will try to get from environment variable ELEVEN_LABS_API
        """
        self.elevenlabs_api_key = elevenlabs_api_key or os.getenv("ELEVEN_LABS_API")
        if not self.elevenlabs_api_key:
            raise ValueError("ElevenLabs API key is required. Set ELEVEN_LABS_API environment variable or pass it directly.")
        
        self.client = ElevenLabs(
            api_key=self.elevenlabs_api_key
        )
        self.voice_id = "mrDMz4sYNCz18XYFpmyV"  # The voice ID you specified
        self.model_id = "eleven_multilingual_v2"
        self.output_format = "mp3_44100_128"
        
        logger.info("JokeTTS initialized successfully")
    
    async def speak_joke(self, joke_data: Dict[str, Any], play_audio: bool = True, stream: bool = False):
        """
        Convert a joke response to speech and optionally play it.

        Args:
            joke_data: Dictionary containing joke response data from joke_responder
            play_audio: Whether to play the audio immediately (default: True)
            stream: If True, return generator for streaming, if False return bytes

        Returns:
            Audio generator if stream=True, audio bytes if stream=False, None if error
        """
        try:
            if not joke_data or not joke_data.get("joke_response"):
                logger.warning("No joke response provided for TTS")
                return None
            
            joke_text = joke_data["joke_response"]
            joke_type = joke_data.get("joke_type", "general")
            confidence = joke_data.get("confidence", 0.0)
            
            logger.info(f"Converting joke to speech: '{joke_text}' (Type: {joke_type}, Confidence: {confidence:.2f}, streaming: {stream})")

            # Convert text to speech
            audio = self.client.text_to_speech.convert(
                text=joke_text,
                voice_id=self.voice_id,
                model_id=self.model_id,
                output_format=self.output_format,
            )

            if stream:
                # Return the generator directly for streaming
                return audio
            else:
                # Collect all chunks for non-streaming use
                audio_bytes = b"".join(audio)

                if play_audio:
                    logger.info("Playing joke audio...")
                    play.play(audio_bytes)
                    logger.info("Joke audio played successfully")

                return audio_bytes
            
        except Exception as e:
            logger.error(f"Error converting joke to speech: {e}")
            return None
    
    async def speak_text(self, text: str, play_audio: bool = True, stream: bool = False):
        """
        Convert any text to speech and optionally play it.

        Args:
            text: Text to convert to speech
            play_audio: Whether to play the audio immediately (default: True)
            stream: If True, return generator for streaming, if False return bytes

        Returns:
            Audio generator if stream=True, audio bytes if stream=False, None if error
        """
        try:
            logger.info(f"Converting text to speech: '{text}' (streaming: {stream})")

            # Convert text to speech
            audio = self.client.text_to_speech.convert(
                text=text,
                voice_id=self.voice_id,
                model_id=self.model_id,
                output_format=self.output_format,
            )

            if stream:
                # Return the generator directly for streaming
                return audio
            else:
                # Collect all chunks for non-streaming use
                audio_bytes = b"".join(audio)

                if play_audio:
                    logger.info("Playing audio...")
                    play.play(audio_bytes)
                    logger.info("Audio played successfully")

                return audio_bytes

        except Exception as e:
            logger.error(f"Error converting text to speech: {e}")
            return None
    
    def save_audio(self, audio_data: bytes, filename: str) -> bool:
        """
        Save audio data to a file.
        
        Args:
            audio_data: Audio data as bytes
            filename: Name of the file to save
            
        Returns:
            True if successful, False otherwise
        """
        try:
            with open(filename, 'wb') as f:
                f.write(audio_data)
            logger.info(f"Audio saved to {filename}")
            return True
        except Exception as e:
            logger.error(f"Error saving audio to {filename}: {e}")
            return False

# Integration with joke_responder
async def speak_joke_response(joke_data: Dict[str, Any], play_audio: bool = True) -> Optional[bytes]:
    """
    Convenience function to speak a joke response.
    
    Args:
        joke_data: Dictionary containing joke response data from joke_responder
        play_audio: Whether to play the audio immediately (default: True)
        
    Returns:
        Audio data as bytes if successful, None otherwise
    """
    try:
        tts = JokeTTS()
        return await tts.speak_joke(joke_data, play_audio)
    except Exception as e:
        logger.error(f"Error in speak_joke_response: {e}")
        return None

# Test function
async def test_joke_tts():
    """Test the JokeTTS functionality."""
    try:
        print("üé§ Testing JokeTTS...")
        
        # Initialize TTS
        tts = JokeTTS()
        print("‚úÖ JokeTTS initialized successfully!")
        
        # Test with sample joke data
        sample_joke = {
            "original_text": "I love pizza!",
            "joke_response": "I love pizza too! In fact, I'm so passionate about it that I've been known to go on pizza dates with myself!",
            "joke_type": "situational",
            "confidence": 0.85,
            "reasoning": "Pizza is a lighthearted topic perfect for humor"
        }
        
        print(f"üé≠ Testing with joke: '{sample_joke['joke_response']}'")
        
        # Convert to speech
        audio_data = await tts.speak_joke(sample_joke, play_audio=True)
        
        if audio_data:
            print("‚úÖ Joke converted to speech successfully!")
            
            # Save audio file
            if tts.save_audio(audio_data, "test_joke.mp3"):
                print("‚úÖ Audio saved to test_joke.mp3")
            
            return True
        else:
            print("‚ùå Failed to convert joke to speech")
            return False
            
    except Exception as e:
        print(f"‚ùå JokeTTS test failed: {e}")
        return False

if __name__ == "__main__":
    # Run test if executed directly
    asyncio.run(test_joke_tts())
